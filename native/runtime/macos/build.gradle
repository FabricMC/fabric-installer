import org.gradle.internal.jvm.Jvm
def jvmHome = Jvm.current().javaHome

def jniModule = tasks.register("jniModule", Sync) {
	from new File(jvmHome, "include")
	from file("module.modulemap")
	into layout.buildDirectory.dir("Jni")
}

def targets = [
	"x86_64-apple-macos10.9",
	"arm64-apple-macos11"
]

for (target in targets) {
	def arch = target.split("-")[0]

	tasks.register("swiftBuild${arch}", Exec) {
		def sources = fileTree(file("src/main/swift"))
		inputs.files(sources)

		def output = layout.buildDirectory.file("out/${arch}/fabric-installer-native.dylib")
		outputs.file(output)

		dependsOn jniModule

		commandLine(
			"swiftc",
			"-emit-library",
			"-Xcc", "-std=c++20",
			"-cxx-interoperability-mode=default",
			"-I", file("build/Jni").absolutePath,
			"-I", file("build/Jni/darwin").absolutePath,
			"-o", output.get().asFile.absolutePath,
			"-target", target
		)

		args(sources.files.collect { it.absolutePath })
	}
}

def jar  = tasks.register("jar", Jar) {
	for (target in targets) {
		def arch = target.split("-")[0]
		from(tasks.named("swiftBuild${arch}").get().outputs.files) {
			into "natives/macos/${arch}"
		}
	}

	rename { fileName ->
		"fabric-loom-native.dylib"
	}
}

tasks.build.dependsOn(jar)

// This isn't ideal, swift-format seems to be be on the path on CI
def swiftFormat = "xcrun --find swift-format".execute().text.trim()
spotless {
	format("swift") {
		target 'src/**/*.swift'
		nativeCmd("swift-format", swiftFormat, ["format", "-"])
	}
}

publishing {
	publications {
		named("maven", MavenPublication) {
			artifact(jar)
		}
	}
}